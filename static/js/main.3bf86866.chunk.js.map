{"version":3,"sources":["components/DisplaySettings.module.css","components/Display.tsx","components/MyButton.tsx","components/DisplaySettings.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Display","props","className","incValue","MyButton","onClick","name","DisplaySettings","inputClasses","minValue","maxValue","s","inputErrorClass","inputMinClass","type","value","onChange","e","changeMaxValue","currentTarget","changeMinValue","App","maxStorage","localStorage","getItem","minStorage","useState","Number","setMinValue","setMaxValue","inc","setInc","press","setPress","endClass","resetClass","displayClass","displayInformation","setItem","String","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3bf86866.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputErrorClass\":\"DisplaySettings_inputErrorClass__2R0Rk\",\"inputMinClass\":\"DisplaySettings_inputMinClass__1-UVW\"};","import React from 'react';\r\n\r\ntype DisplayPropsType = {\r\n    className: string\r\n    incValue: number|string\r\n}\r\n\r\n\r\nfunction Display(props:DisplayPropsType) {\r\n\r\n    return(\r\n        <div className={props.className}>\r\n           {props.incValue}\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Display;","import React from 'react';\r\n\r\ntype MyButtonPropsType = {\r\n    className: string\r\n    name:string\r\n    onClick: ()=> void\r\n}\r\n\r\n\r\nfunction MyButton(props:MyButtonPropsType) {\r\n\r\n    return(\r\n        <div>\r\n             <button\r\n                 className={props.className}\r\n                 onClick={props.onClick}\r\n             >{props.name}</button>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default MyButton;","import React, {ChangeEvent} from 'react';\r\nimport s from './DisplaySettings.module.css'\r\n\r\n\r\ntype DisplayPropsType = {\r\n    className: string\r\n    minValue: number\r\n    maxValue: number\r\n    changeMaxValue: (maxValue: number) => void\r\n    changeMinValue: (maxValue: number) => void\r\n}\r\n\r\nfunction DisplaySettings(props: DisplayPropsType) {\r\n\r\n\r\n    const changeMaxValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.changeMaxValue(+e.currentTarget.value);\r\n    };\r\n\r\n    const changeMinValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.changeMinValue(+e.currentTarget.value);\r\n    };\r\n\r\n    let inputClasses = props.minValue === props.maxValue\r\n    || props.minValue < 0\r\n    || props.maxValue < 0\r\n    || props.minValue > props.maxValue\r\n        ?s.inputErrorClass\r\n        : s.inputMinClass;\r\n\r\n\r\n\r\n    return (\r\n        <div className={props.className}>\r\n            <div>MaxValue:<input\r\n                className={inputClasses}\r\n                type={'number'}\r\n                value={props.maxValue}\r\n                onChange={changeMaxValue}\r\n            />\r\n            </div>\r\n            <div>MinValue:<input\r\n                className={inputClasses}\r\n                type={'number'}\r\n                value={props.minValue}\r\n                onChange={changeMinValue}\r\n            />\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default DisplaySettings;","import React, {useState} from 'react';\nimport './App.css';\nimport Display from './components/Display';\nimport MyButton from './components/MyButton';\nimport DisplaySettings from './components/DisplaySettings';\n\n\n\nfunction App() {\n\n     const maxStorage = localStorage.getItem('max');\n     const minStorage = localStorage.getItem('min');\n\n    const [minValue, setMinValue] = useState<number>(Number(minStorage));\n    const [maxValue, setMaxValue] = useState<number>(Number(maxStorage));\n    const [inc, setInc] = useState<number>(Number(minStorage));\n    const [press, setPress] = useState<boolean>(true);\n\n\n\n    function incCounter() {\n        if (inc < maxValue && press) {\n            setInc(inc + 1);\n        }\n    }\n\n    function resetValue() {\n        if (press) {\n            setInc(minValue);\n        }\n    }\n\n    function setValues() {\n        setMinValue(minValue);\n        setMaxValue(maxValue);\n        setPress(true);\n        localStorage.setItem('max',String(maxValue));\n        localStorage.setItem('min',String(minValue));\n        setInc(minValue);\n    }\n\n    function changeMaxValue(maxValue: number) {\n        setMaxValue(maxValue)\n        setInc(0);\n        setPress(false);\n    }\n\n    function changeMinValue(minValue: number) {\n        setMinValue(minValue)\n        setInc(0);\n        setPress(false);\n    }\n\n\n    const endClass = inc >= maxValue\n    || minValue === maxValue\n    || minValue < 0\n    || maxValue < 0\n    || minValue > maxValue\n        ? 'button1End'\n        : press\n            ? 'button1'\n            : 'button1End';\n\n    const resetClass = inc === minValue\n    || minValue === maxValue\n    || minValue < 0\n    || maxValue < 0\n    || minValue > maxValue\n        ? 'button2reset'\n        :\n        press\n            ? 'button2'\n            : 'button2reset';\n\n    const displayClass = inc === maxValue\n    || minValue === maxValue\n    || minValue < 0\n    || maxValue < 0\n    || minValue > maxValue\n        ? 'displayEnd'\n        : 'display1';\n    const enterValuexText = 'enter values and press \\'set\\'';\n\n    const displayInformation = minValue === maxValue\n    || minValue < 0\n    || maxValue < 0\n    || minValue > maxValue\n        ? 'Incorrect Values'\n        : !press\n            ? enterValuexText\n            : inc;\n\n    return (\n        <div className={'general'}>\n            <div className={'generalCounterContainerd'}>\n                <div className={'display'}>\n                    <Display\n                        className={displayClass}\n                        incValue={displayInformation}\n                    />\n                </div>\n                <div className={'buttons'}>\n                    <MyButton\n                        className={endClass}\n                        name={'Inc'}\n                        onClick={incCounter}\n                    />\n                    <MyButton\n                        className={resetClass}\n                        name={'Reset'}\n                        onClick={resetValue}\n                    />\n                </div>\n            </div>\n\n            <div className={'generalCounterSetting'}>\n                <div className={'display'}>\n                    <DisplaySettings\n                        className={'displaySetting'}\n                        minValue={minValue}\n                        maxValue={maxValue}\n                        changeMaxValue={changeMaxValue}\n                        changeMinValue={changeMinValue}\n\n                    />\n                </div>\n                <div className={'buttons'}>\n                    <MyButton\n                        className={'button3'}\n                        name={'Set'}\n                        onClick={setValues}\n                    />\n                </div>\n            </div>\n\n        </div>\n\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}